{"version":3,"sources":["ImageCropper/Crop/crop.js","components/Modal/Modal.js","components/Loader/Loader.js","ImageCropper/imageCropper.js","App.js","serviceWorker.js","index.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","onload","onerror","error","crossOrigin","src","crop","imageSrc","pixelCrop","a","copyCanvas","document","createElement","copyCtx","getContext","canvas","ctx","maxSize","Math","max","width","height","safe","sqrt","drawImage","data","getImageData","putImageData","x","y","toDataURL","ModalOverlay","props","onClose","onCropComplete","onZoomChange","onCropChange","cropper","show","content","className","imageUrl","zoom","aspect","onClick","ReactDOM","createPortal","getElementById","Modal","Loader","asOverLay","ImageCropper","useState","setImage","piker","useRef","setimageUrl","onShow","setOnshow","isLoading","setisLoading","pixel","setPixel","croppedImage","setCroppedImage","zomm","setCropper","useEffect","fileReader","FileReader","prev","result","readAsDataURL","useCallback","onModalClose","formData","FormData","append","fetch","method","body","response","json","get","console","log","Fragment","alt","type","accept","ref","style","display","onChange","event","target","files","length","current","click","cropArea","cropedAreaPixels","App","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d7cdf72a.chunk.js","sourcesContent":["const createImage = url => new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.onload = () => { resolve(image) };\r\n    image.onerror = error => reject(error);\r\n    image.crossOrigin = \"Anonymous\";\r\n    image.src = url;\r\n});\r\n\r\n\r\nexport default async function crop(imageSrc, pixelCrop) {\r\n    const image = await createImage(imageSrc);\r\n    const copyCanvas = document.createElement('canvas');\r\n    const copyCtx = copyCanvas.getContext('2d');\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    const maxSize = Math.max(image.width, image.height);\r\n    const safe = 2 * ((maxSize / 2) * Math.sqrt(2));\r\n\r\n    copyCanvas.width = safe;\r\n    copyCanvas.height = safe;\r\n\r\n    copyCtx.drawImage(\r\n        image,\r\n        safe / 2 - image.width * 0.5,\r\n        safe / 2 - image.height * 0.5\r\n    )\r\n\r\n    const data = copyCtx.getImageData(0, 0, safe, safe);\r\n\r\n    copyCanvas.width = pixelCrop.width;\r\n    copyCanvas.height = pixelCrop.height\r\n\r\n    copyCtx.putImageData(data,\r\n        0 - safe / 2 + image.width * 0.5 - pixelCrop.x,\r\n        0 - safe / 2 + image.height * 0.5 - pixelCrop.y);\r\n        \r\n    canvas.width = 1080;\r\n    canvas.height = 1080;\r\n\r\n    ctx.drawImage(copyCanvas, 0, 0, copyCanvas.width, copyCanvas.height, 0,0, canvas.width, canvas.height)\r\n\r\n   return  canvas.toDataURL('image/jpeg', 0.5);\r\n    // canvas.toBlob(file => {\r\n    //     resolve(URL.createObjectURL(file))\r\n    //   }, 'image/jpeg') \r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Cropper from 'react-easy-crop';\r\nimport './Modal.css'\r\n\r\nconst ModalOverlay = props => {\r\n    const { onClose, onCropComplete, onZoomChange, onCropChange, cropper, show } = props.props;\r\n    const content = (\r\n        <div className=\"Modal\">\r\n            <div className=\"Modal_content\">\r\n                <div className=\"Modal_sub\">\r\n                    <Cropper\r\n                        image={cropper.imageUrl}\r\n                        zoom={cropper.zoom}\r\n                        crop={cropper.crop}\r\n                        aspect={cropper.aspect}\r\n                        onCropChange={onCropChange}\r\n                        onZoomChange={onZoomChange}\r\n                        onCropComplete={onCropComplete} />\r\n                </div>\r\n                <div className=\"Buttons_div\">\r\n                    <button className=\"img_submit_btn\" onClick={show}>Submit</button>\r\n                    <button onClick={onClose}>close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    return ReactDOM.createPortal(content, document.getElementById('modal'));\r\n}\r\n\r\nconst Modal = (props) => {\r\n    return (\r\n            <ModalOverlay props={props} />\r\n    );\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <div className={`${props.asOverLay && 'loading-overlay'} `}>\r\n            <div className=\"dual-ring\"></div>\r\n        </div>\r\n    );\r\n} \r\nexport default Loader;","import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport crop from './Crop/crop';\r\nimport './imageCropper.css';\r\nimport Modal from '../components/Modal/Modal';\r\nimport Loader from '../components/Loader/Loader';\r\n\r\n\r\nconst ImageCropper = (props) => {\r\n    const [image, setImage] = useState();\r\n    const piker = useRef();\r\n    const [imageUrl, setimageUrl] = useState(null);\r\n    const [onShow, setOnshow] = useState(false);\r\n    const [isLoading, setisLoading] = useState(false);\r\n    const [pixel, setPixel] = useState();\r\n    const [croppedImage, setCroppedImage] = useState(null);\r\n    const [cropper, setCropper] = useState({\r\n        imageUrl: \"\",\r\n        crop: { x: 0, y: 0 },\r\n        zomm: 1,\r\n        aspect: 4 / 4\r\n    });\r\n\r\n    const onCropChange = crop => {\r\n        setCropper(prev => { return ({ ...prev, crop: crop }) });\r\n    }\r\n    const onCropComplete = (cropArea, cropedAreaPixels) => {\r\n        setPixel(cropedAreaPixels);\r\n    }\r\n    const onZoomChange = zoom => {\r\n        setCropper(prev => { return ({ ...prev, zoom: zoom }) });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!image) return;\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setCropper(prev => { return { ...prev, imageUrl: fileReader.result } });\r\n            setOnshow(true);\r\n        };\r\n        fileReader.readAsDataURL(image);\r\n    }, [image]);\r\n\r\n    function onChangeHandler(event) {\r\n        console.log(event.target.files);\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            setImage(event.target.files[0]);\r\n        }\r\n    }\r\n    function onPickHandler() {\r\n        piker.current.click();\r\n    }\r\n\r\n    const show = useCallback(async () => {\r\n        try {\r\n            setisLoading(true);\r\n            const croppedImage = await crop(cropper.imageUrl, pixel);\r\n            setimageUrl(croppedImage);\r\n            onModalClose();\r\n            setisLoading(false);\r\n            const formData = new FormData();\r\n            formData.append('image', croppedImage);\r\n            const response = await fetch('http://localhost:5000/image', { method: \"POST\", body: formData });\r\n            const get = await response.json();\r\n            setCroppedImage('http://localhost:5000/uploads/' + get.url);\r\n            console.log(get);\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }, [pixel, cropper.imageUrl]);\r\n\r\n    const onModalClose = () => {\r\n        setOnshow(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading && <Loader asOverLay />}\r\n            <div className=\"Cropper\">\r\n                <div className=\"profile_pic\">\r\n                    {croppedImage && <img src={imageUrl ? imageUrl : croppedImage} alt=\"croped\" />}\r\n\r\n                    {/* This is in case backend is not available */}\r\n                    \r\n                    {!croppedImage && imageUrl && <img src={imageUrl} alt=\"croped\" />} \r\n                </div>\r\n                <div className=\"img_container\">\r\n                    <input\r\n                        className=\"img_Input\"\r\n                        type=\"file\"\r\n                        accept=\".jpg, .png, .jpeg\"\r\n                        ref={piker} style={{ display: \"none\" }}\r\n                        onChange={onChangeHandler} />\r\n                    <button\r\n                        onClick={onPickHandler}\r\n                        className=\"img_picker\">Pick Image\r\n                </button>\r\n                </div>\r\n                {onShow && <Modal\r\n                    cropper={cropper}\r\n                    onCropChange={onCropChange}\r\n                    onCropComplete={onCropComplete}\r\n                    onZoomChange={onZoomChange}\r\n                    show={show}\r\n                    onShow={onShow}\r\n                    isLoading={isLoading}\r\n                    onClose={onModalClose} />}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ImageCropper; ","import React from 'react';\nimport './App.css';\nimport ImageCropper from './ImageCropper/imageCropper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"navigation\">\n        <div className=\"nav_head\"><h2>Profile Cropper</h2></div>\n      </nav>\n      <main><ImageCropper /></main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}